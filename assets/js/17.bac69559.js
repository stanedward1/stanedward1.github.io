(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{407:function(t,v,r){"use strict";r.r(v);var _=r(2),a=Object(_.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("p",[v("strong",[t._v("Table of Contents")]),t._v(" "),v("em",[t._v("generated with "),v("a",{attrs:{href:"https://github.com/thlorenz/doctoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("DocToc"),v("OutboundLink")],1)])]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E7%B1%BB%E4%B8%8E%E5%AE%9E%E4%BE%8B"}},[t._v("类与实例")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95"}},[t._v("构造方法")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD"}},[t._v("方法重载")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E5%B0%81%E8%A3%85%E7%BB%A7%E6%89%BF%E5%A4%9A%E6%80%81"}},[t._v("封装，继承，多态")]),t._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"#%E5%B0%81%E8%A3%85"}},[t._v("封装")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E7%BB%A7%E6%89%BF"}},[t._v("继承")])]),t._v(" "),v("li",[v("a",{attrs:{href:"#%E5%A4%9A%E6%80%81"}},[t._v("多态")])])])])]),t._v(" "),v("p",[v("strong",[t._v("我们谈到面向对象的时候，免不了会说到对象和类，偶尔看到一个很有意思的说法："),v("em",[t._v("对象可以类比我喜欢某人，而类则是我喜欢某类人")])])]),t._v(" "),v("h1",{attrs:{id:"类与实例"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#类与实例"}},[t._v("#")]),t._v(" 类与实例")]),t._v(" "),v("p",[v("strong",[t._v("一切事物皆对象——对象是一个自包含的实体，用一组可识别的特性和行为来标识")])]),t._v(" "),v("p",[t._v("OOP即针对对象来进行编程。")]),t._v(" "),v("p",[t._v("类：一大群人看电影应该在电影院，而不是家里的沙发上。类就是具有相同的功能的对象的抽象的集合。")]),t._v(" "),v("p",[t._v("实例：一大群人看电影应该是去电影院，那么去哪个电影院也是一个很重要的问题，实例，就是一个真实的对象。实例化就是创建对象的过程，一般使用new关键字来创建。")]),t._v(" "),v("h1",{attrs:{id:"构造方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#构造方法"}},[t._v("#")]),t._v(" 构造方法")]),t._v(" "),v("p",[t._v("构造方法，也叫构造函数，作用是对类进行初始化。")]),t._v(" "),v("h1",{attrs:{id:"方法重载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#方法重载"}},[t._v("#")]),t._v(" 方法重载")]),t._v(" "),v("p",[t._v("方法重载提供了创建同名的多个方法的能力，但这些方法需使用不同的参数类型。")]),t._v(" "),v("p",[t._v("构造方法可以重载，普通方法也是可以重载的。")]),t._v(" "),v("p",[v("strong",[t._v("方法重载可以在不改变原方法的基础上，新增功能。")])]),t._v(" "),v("h1",{attrs:{id:"封装-继承-多态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#封装-继承-多态"}},[t._v("#")]),t._v(" 封装，继承，多态")]),t._v(" "),v("h2",{attrs:{id:"封装"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),v("ol",[v("li",[v("strong",[t._v("良好的封装可以减少耦合")])]),t._v(" "),v("li",[v("strong",[t._v("类内部的实现可以自由的修改")])]),t._v(" "),v("li",[v("strong",[t._v("类具有清晰的对外接口")])])]),t._v(" "),v("p",[v("u",[t._v("把会变化的部分取出来并“封装”起来，好让其他部分不会受到影响——代码变化引起的不经意后果变少，系统变得更有弹性。")])]),t._v(" "),v("h2",{attrs:{id:"继承"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),v("p",[v("strong",[t._v("定义父类和子类——子类继承父类所有的特性，还可以定义新的特性")])]),t._v(" "),v("p",[v("strong",[t._v("如果子类继承于父类")])]),t._v(" "),v("p",[v("u",[t._v("第一、子类拥有父类非private的属性和功能")])]),t._v(" "),v("p",[v("u",[t._v("第二、子类具有自己的属性和功能，即子类可以扩展父类没有的属性和功能")])]),t._v(" "),v("p",[v("u",[t._v("第三、子类还可以以自己的方式实现父类的功能（方法重写）。")])]),t._v(" "),v("p",[v("strong",[t._v("继承的缺点：父类变，子类也变--------继承是一种类与类之间强耦合的关系。")])]),t._v(" "),v("h2",{attrs:{id:"多态"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#多态"}},[t._v("#")]),t._v(" 多态")]),t._v(" "),v("p",[v("strong",[t._v("多态表示不同的对象可以执行相同的动作，但是要通过它们自己的实现代码来执行。")])]),t._v(" "),v("p",[v("img",{attrs:{src:"assets/java-polymorphism-111.png",alt:"img"}})]),t._v(" "),v("p",[t._v("(图片来自菜鸟教程)")])])}),[],!1,null,null,null);v.default=a.exports}}]);